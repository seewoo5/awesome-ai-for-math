# GitHub Actions workflow to generate subject pages after the README has been sorted.
# This version fixes a previous error where the Python script was executed as shell
# commands, causing "command not found" failures (exit code 127). The script is
# now wrapped in a python heredoc. It triggers after the "ðŸ¤– Sort Papers Table"
# workflow completes and on manual runs.

name: Generate subject pages after sorting

on:
  workflow_run:
    workflows: ["ðŸ¤– Sort Papers Table"]
    branches: [ main ]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-pages:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Pull latest main
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Pull the latest main branch before making any changes
          git pull --rebase origin main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: Generate subject pages and update links
        run: |
          python <<'PY'
          import re
          from pathlib import Path

          root = Path('.')
          readme = root / 'README.md'
          subjects_dir = root / 'subjects'
          subjects_dir.mkdir(exist_ok=True)

          def slugify(text: str) -> str:
              text = text.lower().strip()
              text = re.sub(r'[^a-z0-9]+', '-', text)
              return text.strip('-')

          lines = readme.read_text(encoding='utf-8').splitlines()

          header_idx = next(i for i,l in enumerate(lines) if l.strip().startswith('|') and 'Title' in l)
          body_start = header_idx + 2
          body_end = next((i for i in range(body_start, len(lines)) if lines[i].strip() == ''), len(lines))

          header = lines[header_idx]
          separator = lines[header_idx + 1]
          table_rows = lines[body_start:body_end]

          unique_subs = set()
          parsed = []
          for row in table_rows:
              cols = [c.strip() for c in row.strip('|').split('|')]
              if len(cols) < 4:
                  parsed.append((row, []))
                  continue
              subj_col = cols[1]
              raw = [s.strip() for s in re.split(r',\s*', subj_col)]
              subs = []
              for s in raw:
                  s_clean = re.sub(r'^[\[\(]+|[\)\]]+$', '', s).strip()
                  if s_clean:
                      subs.append(s_clean)
                      unique_subs.add(s_clean)
              parsed.append((row, subs))

          # Create subject pages
          for sub in sorted(unique_subs):
              slug = slugify(sub)
              page_path = subjects_dir / f'{slug}.md'
              rows_for_sub = [r for r, subs in parsed if sub in subs]
              md = []
              md.append('---')
              md.append(f'title: {sub}')
              md.append('layout: default')
              md.append('---\n')
              md.append(f'# {sub} papers\n')
              md.append(header)
              md.append(separator)
              md.extend(rows_for_sub)
              page_path.write_text('\n'.join(md), encoding='utf-8')

          # Rewrite README links
          new_rows = []
          for row, subs in parsed:
              if not subs:
                  new_rows.append(row)
                  continue
              cols = [c.strip() for c in row.strip('|').split('|')]
              links = [f'[{s}](./subjects/{slugify(s)}.md)' for s in subs]
              cols[1] = ', '.join(links)
              new_rows.append('| ' + ' | '.join(cols) + ' |')

          updated = lines[:body_start] + new_rows + lines[body_end:]
          readme.write_text('\n'.join(updated), encoding='utf-8')
          PY

      - name: Commit and push changes
        run: |
          # Stage changes
          git add README.md subjects
          # Only commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "chore: auto-generate subject pages and update links"
            git push origin HEAD:main
          else
            echo "No changes detected."
          fi