name: Generate subject pages and link tags

on:
  push:
    branches: ["main"]
  # allow manual triggering
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Generate subject pages and update README links
        run: |
          python3 - <<'PY'
          import os
          import re
          from pathlib import Path

          def slugify(text: str) -> str:
              return re.sub(r'[^a-z0-9]+', '-', text.lower()).strip('-')

          # Read README
          readme_path = Path('README.md')
          lines = readme_path.read_text(encoding='utf-8').splitlines()

          # Find table boundaries
          start = None
          for idx, line in enumerate(lines):
              if line.lstrip().startswith('| Title'):
                  start = idx
                  break
          if start is None:
              raise SystemExit('Table header not found')

          end = len(lines)
          for j in range(start + 2, len(lines)):
              if lines[j].strip().startswith('<!--'):
                  end = j
                  break

          header = lines[start]
          separator = lines[start + 1]
          table_rows = lines[start + 2:end]

          subjects_map = {}
          # Build mapping of subject names to slug and associated rows
          for row in table_rows:
              cols = [c.strip() for c in row.strip('|').split('|')]
              if len(cols) < 4:
                  continue
              subs = [s.strip() for s in cols[1].split(',')]
              for sub in subs:
                  if sub:
                      subjects_map.setdefault(sub, {'slug': slugify(sub), 'rows': []})['rows'].append(row)

          # Create/update subject pages
          subjects_dir = Path('subjects')
          subjects_dir.mkdir(exist_ok=True)
          for sub, info in subjects_map.items():
              slug = info['slug']
              rows = info['rows']
              with (subjects_dir / f"{slug}.md").open('w', encoding='utf-8') as f:
                  f.write('---\n')
                  f.write(f"title: {sub}\n")
                  f.write('layout: default\n')
                  f.write('---\n\n')
                  f.write(f'# {sub} papers\n\n')
                  f.write('| Title | Subject(s) | Venue & Year | Links & Resources |\n')
                  f.write('| :--- | :--- | :--- | :--- |\n')
                  for r in rows:
                      f.write(r + '\n')

          # Update README table to link subjects to pages
          # Prepare replacement patterns sorted by decreasing length to avoid partial matches
          sorted_subjects = sorted(subjects_map.keys(), key=len, reverse=True)

          new_table_rows = []
          for row in table_rows:
              cols = [c.strip() for c in row.strip('|').split('|')]
              if len(cols) < 4:
                  new_table_rows.append(row)
                  continue
              subjects_field = cols[1]
              for sub in sorted_subjects:
                  slug = subjects_map[sub]['slug']
                  link = f'[{sub}](./subjects/{slug}.md)'
                  # Replace only whole subject occurrences, avoid already linked
                  pattern = rf'(?<!\[)\b{re.escape(sub)}\b(?!\])'
                  subjects_field = re.sub(pattern, link, subjects_field)
              cols[1] = subjects_field
              new_row = '| ' + ' | '.join(cols) + ' |'
              new_table_rows.append(new_row)

          # Build new README content
          new_lines = lines[:start + 2] + new_table_rows + lines[end:]
          readme_path.write_text('\n'.join(new_lines) + '\n', encoding='utf-8')
          PY

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add subjects README.md
          if ! git diff --cached --quiet; then
            git commit -m "chore: auto-generate subject pages and update links"
            git push
          else
            echo "No subject pages or README updates to commit."
          fi
